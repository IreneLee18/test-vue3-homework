{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"position-absolute top-0 end-0 p-3\",\n  style: {\n    \"z-index\": \"1050\"\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Toast = _resolveComponent(\"Toast\");\n\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.messages, (item, key) => {\n    return _openBlock(), _createBlock(_component_Toast, {\n      key: key,\n      msg: item\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString(item), 1\n      /* TEXT */\n      )]),\n      _: 2\n      /* DYNAMIC */\n\n    }, 1032\n    /* PROPS, DYNAMIC_SLOTS */\n    , [\"msg\"]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))]);\n}","map":{"version":3,"mappings":";;EACOA,KAAK,EAAC;EAAoCC,KAAqB,EAArB;IAAA;EAAA;;;;;uBAA/CC,oBAIM,KAJN,cAIM,oBAHJA,oBAE4BC,SAF5B,EAE4B,IAF5B,EAE4BC,YADNC,cACM,EADE,CAAtBC,IAAsB,EAAhBC,GAAgB,KAAb;yBADjBC,aAE4BC,gBAF5B,EAE4B;MADKF,GAAG,EAAEA,GACV;MAA3BG,GAAG,EAAEJ;IAAsB,CAF5B;wBAEY,MAAQ,mCAANA,OAAI;MAAA;OAAE;;;;KAFpB;;IAAA;GAE4B,CAF5B;;EAAA,CAGI,EAJN","names":["class","style","_createElementBlock","_Fragment","_renderList","$data","item","key","_createBlock","_component_Toast","msg"],"sourceRoot":"","sources":["/Users/irenelee/Desktop/vue-cli-demo/project/test1/src/components/ToastList.vue"],"sourcesContent":["<template>\n  <div class=\"position-absolute top-0 end-0 p-3\" style=\"z-index: 1050\">\n    <Toast\n    v-for=\"(item, key) in messages\" :key=\"key\"\n    :msg=\"item\">{{item}}</Toast>\n  </div>\n</template>\n\n<script>\nimport Toast from '@/components/ToastMsg.vue'\nexport default {\n  components: {\n    Toast\n  },\n  data () {\n    return {\n      messages: []\n    }\n  },\n  inject: ['emitter'],\n  mounted () {\n    // 註冊監聽\n    this.emitter.on('pushMsg', (msg) => {\n      const { style = 'success', title, content } = msg\n      this.messages.push(style, title, content)\n      console.log(this.messages)\n    })\n  }\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}